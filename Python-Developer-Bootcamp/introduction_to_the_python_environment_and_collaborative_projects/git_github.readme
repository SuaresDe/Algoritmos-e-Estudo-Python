# Code Versioning

Code versioning, also known as version control, is the practice of tracking and managing changes to source code over time. It enables developers to collaborate efficiently, maintain a history of changes, and revert to previous versions when needed.

## Why is Code Versioning Important?

- **Collaboration**: Multiple developers can work on the same project without overwriting each other's work.
- **History Tracking**: Keeps a record of changes, who made them, and why.
- **Rollback Ability**: Restores a previous version if something breaks.
- **Branching and Merging**: Allows simultaneous work on features, bug fixes, and different project versions.
- **Backup & Recovery**: Prevents data loss by storing code versions safely.

## Types of Version Control Systems (VCS)

### Local Version Control
A basic system where users manually save different versions of files on their computers.  
**Downside**: Prone to human errors and difficult to track changes systematically.

### Centralized Version Control (CVCS)
A single, central server holds all versioned files, and developers pull and push changes from it.  
**Example**: SVN (Subversion), Perforce  
**Downside**: If the central server fails, all version history may be lost.

### Distributed Version Control (DVCS)
Every developer has a full copy of the repository, allowing offline work and better redundancy.  
**Example**: Git, Mercurial  
**Advantage**: No single point of failure, better branching, and collaboration.

## Git: The Most Popular Version Control System
Git is a distributed version control system (DVCS) that allows efficient code versioning and collaboration.  
GitHub, GitLab, and Bitbucket are popular platforms for managing Git repositories remotely.

### Common Git Commands

#### `git clone`
The `git clone` command is used to copy a remote Git repository to your local machine. It downloads all the files, commits, branches, and repository history, allowing you to work on a local copy of the project.

#### `git commit`
The `git commit` command is used to save changes to a Git repository. Each commit acts like a snapshot of your project at a specific point in time, allowing you to track changes and revert if necessary.

#### `git pull`
The `git pull` command is used to update your local repository with the latest changes from a remote repository. It fetches changes and merges them into your current branch automatically.

#### `git push`
The `git push` command uploads committed changes from your local repository to a remote repository (such as GitHub, GitLab, or Bitbucket). This is how you share your work with others or back it up in a remote location.

## GitHub

### What is GitHub?
GitHub is a web-based platform that helps developers store, manage, and collaborate on projects using Git, a version control system. It allows developers to work together on code by tracking changes, merging updates, and maintaining repositories.
